{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { spotifyApi } from '../../api';\n\nfunction* getAlbuns(action) {\n  const {\n    token\n  } = action.payload;\n  const config = {\n    headers: {\n      Authorization: token\n    }\n  };\n  const response = yield call(spotifyApi.get, '/recommendations?seed_genres=metal', config);\n  const albuns = response.data.tracks.map(x => {\n    return {\n      name: x.album.name,\n      images: x.album.images,\n      id: x.album.id,\n      link: x.album.href,\n      artist: x.album.artists[0].name\n    };\n  });\n  yield put({\n    type: \"@spotify/GET_ARTISTS\",\n    payload: {\n      data: response.data.tracks,\n      config\n    }\n  });\n  yield put({\n    type: \"spotify/GET_ALBUNS\",\n    payload: {\n      albuns\n    }\n  });\n}\n\nfunction* getArtists(action) {\n  const {\n    data,\n    config\n  } = action.payload;\n  let artists = [];\n\n  for (let i = 0; i < data.length; i++) {\n    let res = yield call(spotifyApi.get, `/artists/${data[0].artists[0].id}`, config);\n    artists = [...artists, {\n      name: res.data.name,\n      link: res.data.link,\n      images: res.data.images,\n      genre: res.data.genre\n    }];\n  }\n\n  console.log(artists);\n}\n\nexport default function* spotifySaga() {\n  yield all([takeEvery(\"@spotify/GET_ALBUNS\", getAlbuns), takeEvery(\"@spotify/GET_ARTISTS\", getArtists)]);\n}","map":{"version":3,"sources":["/home/reis/Documentos/programacao/react/metal-spotify/app/src/store/spotify/saga.ts"],"names":["all","put","takeEvery","call","spotifyApi","getAlbuns","action","token","payload","config","headers","Authorization","response","get","albuns","data","tracks","map","x","name","album","images","id","link","href","artist","artists","type","getArtists","i","length","res","genre","console","log","spotifySaga"],"mappings":"AACA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,IAA9B,QAA+C,oBAA/C;AAEA,SAASC,UAAT,QAA2B,WAA3B;;AAsCE,UAAUC,SAAV,CAAoBC,MAApB,EAAsC;AAEpC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,MAAM,CAACE,OAAzB;AAEA,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAEJ;AAAhB;AADE,GAAf;AAGA,QAAMK,QAAmB,GAAG,MAAMT,IAAI,CAACC,UAAU,CAACS,GAAZ,EAClC,oCADkC,EAElCJ,MAFkC,CAAtC;AAKE,QAAMK,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBC,GAArB,CAA0BC,CAAD,IAAa;AACjD,WAAO;AACHC,MAAAA,IAAI,EAAED,CAAC,CAACE,KAAF,CAAQD,IADX;AAEHE,MAAAA,MAAM,EAAEH,CAAC,CAACE,KAAF,CAAQC,MAFb;AAGHC,MAAAA,EAAE,EAAEJ,CAAC,CAACE,KAAF,CAAQE,EAHT;AAIHC,MAAAA,IAAI,EAAEL,CAAC,CAACE,KAAF,CAAQI,IAJX;AAKHC,MAAAA,MAAM,EAAEP,CAAC,CAACE,KAAF,CAAQM,OAAR,CAAgB,CAAhB,EAAmBP;AALxB,KAAP;AAQH,GATc,CAAf;AAcF,QAAMlB,GAAG,CAAC;AAAC0B,IAAAA,IAAI,EAAE,sBAAP;AAA+BnB,IAAAA,OAAO,EAAE;AAACO,MAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,CAAcC,MAArB;AAA6BP,MAAAA;AAA7B;AAAxC,GAAD,CAAT;AACA,QAAMR,GAAG,CAAC;AAAC0B,IAAAA,IAAI,EAAE,oBAAP;AAA6BnB,IAAAA,OAAO,EAAE;AAAEM,MAAAA;AAAF;AAAtC,GAAD,CAAT;AAGH;;AAGD,UAAUc,UAAV,CAAqBtB,MAArB,EAAuC;AAEnC,QAAM;AAAES,IAAAA,IAAF;AAAQN,IAAAA;AAAR,MAAkBH,MAAM,CAACE,OAA/B;AAGA,MAAIkB,OAAY,GAAG,EAAnB;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACd,IAAI,CAACe,MAAtB,EAA8BD,CAAC,EAA/B,EAAkC;AAE/B,QAAIE,GAAoB,GAAG,MAAM5B,IAAI,CAACC,UAAU,CAACS,GAAZ,EAC/B,YAAWE,IAAI,CAAC,CAAD,CAAJ,CAAQW,OAAR,CAAgB,CAAhB,EAAmBJ,EAAG,EADF,EAEhCb,MAFgC,CAArC;AAGKiB,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAa;AACnBP,MAAAA,IAAI,EAAEY,GAAG,CAAChB,IAAJ,CAASI,IADI;AAEnBI,MAAAA,IAAI,EAAEQ,GAAG,CAAChB,IAAJ,CAASQ,IAFI;AAGnBF,MAAAA,MAAM,EAAEU,GAAG,CAAChB,IAAJ,CAASM,MAHE;AAInBW,MAAAA,KAAK,EAAED,GAAG,CAAChB,IAAJ,CAASiB;AAJG,KAAb,CAAV;AAMP;;AAIGC,EAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ;AAGP;;AAGD,eAAe,UAAUS,WAAV,GAAuB;AAClC,QAAMnC,GAAG,CAAC,CACNE,SAAS,CAAC,qBAAD,EAAwBG,SAAxB,CADH,EAENH,SAAS,CAAC,sBAAD,EAAyB0B,UAAzB,CAFH,CAAD,CAAT;AAIH","sourcesContent":["import { AnyAction } from '@reduxjs/toolkit'\nimport { all, put, takeEvery, call, take} from 'redux-saga/effects'\n\nimport { spotifyApi } from '../../api'\n\n\ninterface Iimages {\n    url: string;\n}\ninterface Itracks {\n    album: {\n        name:string;\n        href:string;\n        images: Iimages[];\n        id: string;\n        artists: [{\n            name:string;\n        }]\n    }\n\n    artists: [{\n        id:string\n        name:string;\n    }]\n}\ninterface IResponse {\n    data: {\n       tracks: Itracks[]\n    }\n}\n\ninterface IResponseArtist {\n    data: {\n        name: string;\n        link:string;\n        images: Iimages[];\n        genre: string[];\n    }\n}\n\n\n  function* getAlbuns(action: AnyAction){\n\n    const { token } = action.payload;\n\n    const config = {\n        headers: {Authorization: token }\n    }\n    const response: IResponse = yield call(spotifyApi.get,\n        '/recommendations?seed_genres=metal',\n        config\n        )\n\n      const albuns = response.data.tracks.map((x:Itracks)=>{\n          return {\n              name: x.album.name,\n              images: x.album.images,\n              id: x.album.id,\n              link: x.album.href,\n              artist: x.album.artists[0].name\n\n          }\n      })  \n\n\n\n\n    yield put({type: \"@spotify/GET_ARTISTS\", payload: {data: response.data.tracks, config} })\n    yield put({type: \"spotify/GET_ALBUNS\", payload: { albuns}})\n\n\n}\n\n\nfunction* getArtists(action: AnyAction){\n\n    const { data, config} = action.payload\n\n\n    let artists: any = [];\n    for(let i = 0; i<data.length; i++){\n\n       let res: IResponseArtist = yield call(spotifyApi.get,\n            `/artists/${data[0].artists[0].id}`,\n            config)\n            artists = [...artists, {\n                name: res.data.name,\n                link: res.data.link,\n                images: res.data.images,\n                genre: res.data.genre\n            }]\n    }\n  \n       \n          \n        console.log(artists)\n      \n\n}\n\n\nexport default function* spotifySaga(){\n    yield all([\n        takeEvery(\"@spotify/GET_ALBUNS\", getAlbuns),\n        takeEvery(\"@spotify/GET_ARTISTS\", getArtists)       \n    ])\n}\n"]},"metadata":{},"sourceType":"module"}