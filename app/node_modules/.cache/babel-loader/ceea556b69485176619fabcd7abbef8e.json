{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { spotifyApi } from '../../api';\n\nfunction* getAlbuns(action) {\n  const {\n    token\n  } = action.payload;\n  const config = {\n    headers: {\n      Authorization: token\n    }\n  };\n  const response = yield call(spotifyApi.get, '/recommendations?seed_genres=metal', config);\n  const albuns = response.data.tracks.map(x => {\n    return {\n      name: x.album.name,\n      images: x.album.images,\n      id: x.album.id,\n      link: x.album.href,\n      artist: x.album.artists[0].name\n    };\n  });\n  console.log(response.data.tracks[0].artists[0].id);\n  let artists = [];\n  const x = response.data.tracks.map(async x => {\n    const res = await spotifyApi.get(`/artists/${x.artists[0].id}`, config);\n    artists = [...artists, res.data];\n    return res.data;\n  });\n  console.log(artists);\n  yield put({\n    type: \"spotify/GET_ALBUNS\",\n    payload: {\n      albuns\n    }\n  });\n}\n\nexport default function* spotifySaga() {\n  yield all([takeEvery('@spotify/GET_ALBUNS', getAlbuns)]);\n}","map":{"version":3,"sources":["/home/reis/Documentos/programacao/react/metal-spotify/app/src/store/spotify/saga.ts"],"names":["all","put","takeEvery","call","spotifyApi","getAlbuns","action","token","payload","config","headers","Authorization","response","get","albuns","data","tracks","map","x","name","album","images","id","link","href","artist","artists","console","log","res","type","spotifySaga"],"mappings":"AACA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,EAA8BC,IAA9B,QAAyC,oBAAzC;AAEA,SAASC,UAAT,QAA2B,WAA3B;;AA4BE,UAAUC,SAAV,CAAoBC,MAApB,EAAsC;AAEpC,QAAM;AAAEC,IAAAA;AAAF,MAAYD,MAAM,CAACE,OAAzB;AAEA,QAAMC,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAEJ;AAAhB;AADE,GAAf;AAGA,QAAMK,QAAmB,GAAG,MAAMT,IAAI,CAACC,UAAU,CAACS,GAAZ,EAClC,oCADkC,EAElCJ,MAFkC,CAAtC;AAKE,QAAMK,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBC,GAArB,CAA0BC,CAAD,IAAa;AACjD,WAAO;AACHC,MAAAA,IAAI,EAAED,CAAC,CAACE,KAAF,CAAQD,IADX;AAEHE,MAAAA,MAAM,EAAEH,CAAC,CAACE,KAAF,CAAQC,MAFb;AAGHC,MAAAA,EAAE,EAAEJ,CAAC,CAACE,KAAF,CAAQE,EAHT;AAIHC,MAAAA,IAAI,EAAEL,CAAC,CAACE,KAAF,CAAQI,IAJX;AAKHC,MAAAA,MAAM,EAAEP,CAAC,CAACE,KAAF,CAAQM,OAAR,CAAgB,CAAhB,EAAmBP;AALxB,KAAP;AAQH,GATc,CAAf;AAWAQ,EAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqB,CAArB,EAAwBU,OAAxB,CAAgC,CAAhC,EAAmCJ,EAA/C;AAEA,MAAII,OAAY,GAAG,EAAnB;AACA,QAAMR,CAAC,GAAIN,QAAQ,CAACG,IAAT,CAAcC,MAAd,CAAqBC,GAArB,CAA0B,MAAOC,CAAP,IAAqB;AAExD,UAAMW,GAAqB,GAAI,MAAMzB,UAAU,CAACS,GAAX,CAChC,YAAWK,CAAC,CAACQ,OAAF,CAAU,CAAV,EAAaJ,EAAG,EADK,EAEjCb,MAFiC,CAArC;AAKGiB,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaG,GAAG,CAACd,IAAjB,CAAV;AAEH,WAAOc,GAAG,CAACd,IAAX;AACD,GAVU,CAAX;AAYAY,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAGF,QAAMzB,GAAG,CAAC;AAAC6B,IAAAA,IAAI,EAAE,oBAAP;AAA6BtB,IAAAA,OAAO,EAAE;AAAEM,MAAAA;AAAF;AAAtC,GAAD,CAAT;AAGH;;AAGD,eAAe,UAAUiB,WAAV,GAAuB;AAClC,QAAM/B,GAAG,CAAC,CACNE,SAAS,CAAC,qBAAD,EAAwBG,SAAxB,CADH,CAAD,CAAT;AAIH","sourcesContent":["import { AnyAction } from '@reduxjs/toolkit'\nimport { all, put, takeEvery, call} from 'redux-saga/effects'\n\nimport { spotifyApi } from '../../api'\n\n\ninterface Iimages {\n    url: string;\n}\ninterface Itracks {\n    album: {\n        name:string;\n        href:string;\n        images: Iimages[];\n        id: string;\n        artists: [{\n            name:string;\n        }]\n    }\n\n    artists: [{\n        id:string\n    }]\n}\ninterface IResponse {\n    data: {\n       tracks: Itracks[]\n    }\n}\n\n\n  function* getAlbuns(action: AnyAction){\n\n    const { token } = action.payload;\n\n    const config = {\n        headers: {Authorization: token }\n    }\n    const response: IResponse = yield call(spotifyApi.get,\n        '/recommendations?seed_genres=metal',\n        config\n        )\n\n      const albuns = response.data.tracks.map((x:Itracks)=>{\n          return {\n              name: x.album.name,\n              images: x.album.images,\n              id: x.album.id,\n              link: x.album.href,\n              artist: x.album.artists[0].name\n\n          }\n      })  \n\n      console.log(response.data.tracks[0].artists[0].id)\n\n      let artists: any = [];\n      const x  = response.data.tracks.map( async (x:Itracks) => {\n\n        const res: { data: string } =  await spotifyApi.get(\n            `/artists/${x.artists[0].id}`,\n            config)\n\n          \n           artists = [...artists, res.data]\n\n        return res.data\n      })\n\n      console.log(artists)\n\n    \n    yield put({type: \"spotify/GET_ALBUNS\", payload: { albuns}})\n\n\n}\n\n\nexport default function* spotifySaga(){\n    yield all([\n        takeEvery('@spotify/GET_ALBUNS', getAlbuns),\n       \n    ])\n}\n"]},"metadata":{},"sourceType":"module"}